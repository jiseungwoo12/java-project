package logicExample;

public class 드모르간의법칙 {
    public static void main(String[] args) {
        //이번시간에는 드모르간의 법칙에 대해알아보자
        boolean p = true; boolean q = false;
        boolean p1 = true; boolean p2 = true;
        //!(p||q) === !p&&!q 와 !(p&&q) === !p||!q
        //두개의 동치관계는 특별히 드 모르간의 법칙이라고 부르며
        //복잡한 논리식을 계산할때 유용하다
        //숫자의 연산처럼 논리연산에도 몇가지 기본적인 법칙이 성립한다.
        //논리합 (v)는 덧셈과 , 논리곱 (^)은 곱셈과 유사한면이있고
        //진리값 T와 F는 각각 1,0과비슷한 성질을 지닌다.
        //그러나 진리값이 결국 숫자는 아니므로 두 부류의 연산은 다르다는점을 알아두자.
        //논리합에는 F ? 논리곱에는 T라는 항등원이 존재한다 
        //(항등원): 항상같게 되는 원소라는 뜻 연산의결과가 항상원래와 같아지도록 하는숫자
        //따라서 논리합은 F만 존재할시 0 논리곱은 T만 존재할시 1이된다는것이다.
        //p = false q = false p || q == false
        //p = true q = true p&&q == true 이런식으로말이다.
        //a+0 = a   a*1 = a 라는것과도 비슷하다.
        //p v F == p  p + F = p이다 F가 0이기때문이다.
        //p ^ T == p p * 1 = p 이다 true가 1이기때문이다.
        //하지만 숫자와 다르게 자기 자신에 대한 논리합과 논리곱 연산은 다시 자신으로 돌아온다
        //p v p == p  //둘중에하나만같거나 둘다같으면 true이므로
        //p ^ p == p //둘다 참이면 true이므로 p는 동일하잖아
        //두개이상의 명제를 대상으로 하는 논리연산의 법칙중에서는 가장 간단한 것으로 교환법칙을 들수있다
        //p v q == q v p //p랑 q둘중에 하나만 참이여도 참이라 q랑 p의 교환법칙으로도가능
        //p ^ q == q ^ p //하나라도 false이면 false이므로 교환법칙을이용해도 값은같다.

        //그 다음은 결합법칙으로 역시 논리합이나 논리곱 연산에 모두 적용된다.
        //(p || q) || r == p || (q||r) //r이 true거나 p || q가 true일때 true니까 결합법칙성립
        //(p&&q)&&r == p &&(r&&q) 어차피 r과 p &&q 값이 true여야지만 true가 되기때문에 and연산자
    }
}
